package com.test.bulletinboard;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

@Controller // This means that this class is a Controller
@RequestMapping(path="/board") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private MessageRepository messageRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public String addNewMessage (@RequestParam String title
      , @RequestParam String publicDate, @RequestParam String expirationDate
      , @RequestParam String publisher, @RequestParam String content
      , @RequestParam MultipartFile attachment
      ) throws IOException {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Message n = new Message();
    n.setTitle(title);
    n.setPublicDate(publicDate);
    n.setExpirationDate(expirationDate);
    n.setPublisher(publisher);
    n.setContent(content);
    n.setFileName(attachment.getOriginalFilename());
    n.setFileContent(attachment.getBytes());
    n.setFileContentType(attachment.getContentType());
    
    
    messageRepository.save(n);
    return "redirect:/home?userID="+publisher;
    }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<Message> getAllMessages() {
    // This returns a JSON or XML with the users
    return messageRepository.findAll();
  }

  @PostMapping(path="/edit/{id}")
  public String modifyMessage (@PathVariable Integer id,@RequestParam String title
      , @RequestParam String publicDate
      , @RequestParam String expirationDate
      , @RequestParam String publisher
      , @RequestParam String content
      , @RequestParam MultipartFile attachment
      ) throws IOException {
        Message n = messageRepository.findById(id)
          .orElseThrow(() -> new IllegalArgumentException("Message not found with id: " + id));
        n.setTitle(title);  
        n.setPublicDate(publicDate);
        n.setExpirationDate(expirationDate);
        n.setPublisher(publisher);
        n.setContent(content);
        if (!attachment.isEmpty()){
          n.setFileName(attachment.getOriginalFilename());
          n.setFileContent(attachment.getBytes());
          n.setFileContentType(attachment.getContentType());
        }
        messageRepository.save(n);
        return "redirect:/home";
      }
    
  @PostMapping(path="/delete/{id}")
  public  @ResponseBody String deleteMessageById(@PathVariable Integer id) {
    // This returns a JSON or XML with the users
    messageRepository.deleteById(id);
    return "OK";
  }
}